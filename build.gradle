plugins {
    id "java"
    id "io.freefair.lombok" version "8.14" apply false
    id "io.spring.dependency-management" version "1.1.7" apply false
    id "org.springframework.boot" version "3.2.12" apply false
}

allprojects {
    group = "com.sample"
    version = "0.6.0-SNAPSHOT"

    ext {
        // https://github.com/alibaba/spring-cloud-alibaba/wiki/版本说明#毕业版本依赖关系推荐使用
        springCloudVersion = "2023.0.5"
        springCloudAlibabaVersion = "2022.0.0.2"
        springAiVersion= "1.0.0"
        knife4jVersion = "4.5.0"
    }

    repositories {
        maven { url "https://maven.aliyun.com/repository/public" }
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "checkstyle"
    apply plugin: "io.freefair.lombok"
    apply plugin: "io.spring.dependency-management"

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21

    dependencies {
        implementation platform("org.springframework.ai:spring-ai-bom:$springAiVersion")

        implementation "org.slf4j:slf4j-api"
        implementation "org.apache.commons:commons-lang3"

        testImplementation("org.springframework.boot:spring-boot-starter-test") {
            exclude group: "org.junit.vintage", module: "junit-vintage-engine"
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:$springCloudAlibabaVersion"
            mavenBom "com.github.xiaoymin:knife4j-dependencies:$knife4jVersion"
        }

        dependencies {
            dependencySet(group: "org.slf4j", version: "2.0.17") {
                entry "slf4j-api"
                entry "slf4j-simple"
                entry "slf4j-log4j12"
            }

            dependency "org.apache.commons:commons-lang3:3.17.0"
            dependency "org.apache.commons:commons-collections4:4.5.0"

            // dependency "com.gitee.sdk:gitee5j:1.1.0"
            dependency "io.github.imfangs:dify-java-client:1.1.3"
        }
    }

    test {
        useJUnitPlatform()
    }

    tasks.register("checkstyle", Checkstyle) {
        configFile file("${rootDir}/config/checkstyle/checkstyle.xml")
        ignoreFailures true
        showViolations true
        source = fileTree("src")
        include "**/*.java"
        exclude "**/test/**"
        exclude "**/build/**"
        classpath = files()
    }

    tasks.register("removeLombokConfig") {
        def subProjectPath = project.projectDir
        if (null != subProjectPath) {
            def lombokConfigFile = new File(subProjectPath, "lombok.config")
            if (lombokConfigFile.exists()) {
                lombokConfigFile.delete()
            }
        }
    }

    tasks.register("removeOutputLog") {
        def subProjectPath = project.projectDir
        if (null != subProjectPath) {
            subProjectPath.list().each { filename ->
                if (filename.endsWith(".log") || filename.equalsIgnoreCase("logs")) {
                    def subPath = new File(subProjectPath, filename)
                    if (subPath.isDirectory()) {
                        for (File leafFile : subPath.listFiles()) {
                            leafFile.delete()
                        }
                    }
                    subPath.delete()
                }
            }
        }
    }

    defaultTasks "assemble"
}
